plot(results$dm,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
install.packages("rafalib")
install.packages("rafalib")
plot(results$dm,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
library(rafalib)
mypar(1,2)
hist(nullpvals,ylim=c(0,1400))
hist(pvals,ylim=c(0,1400))
permg <- sample(g)
permresults <- rowttests(geneExpression,permg)
geneExpression
permg
permg <- sample(g)
permresults <- rowttests(geneExpression,permg)
library(Biobase)
library(GSE5859)
library(GSE5859)
library(genefilter)
library(GSE5859Subset)
data(GSE5859Subset)
g <- factor(sampleInfo$group)
results <- rowttests(geneExpression,g)
pvals <- results$p.value
m <- nrow(geneExpression)
n <- ncol(geneExpression)
randomData <- matrix(rnorm(n*m),m,n)
nullpvals <- rowttests(randomData,g)$p.value
plot(results$dm,-log10(results$p.value),
xlab="Effect size",ylab="- log (base 10) p-values")
library(rafalib)
mypar(1,2)
hist(nullpvals,ylim=c(0,1400))
hist(pvals,ylim=c(0,1400))
permg <- sample(g)
permresults <- rowttests(geneExpression,permg)
hist(permresults$p.value)
library(Biobase)
library(GSE5859)
library(Biobase)
library(GSE5859)
inistall_github("genomicsclass/GSE5859")
inistall_github("genomicsclass/GSE5859Subsert")
inistall_github("genomicsclass/GSE5859Subset")
install_github("genomicsclass/GSE5859Subset")
library("devtools")
install_github("genomicsclass/GSE5859Subset")
install_github("genomicsclass/GSE5859")
library(Biobase)
library(GSE5859)
data(GSE5859)
ge <- exprs(e) ##ge for gene expression
ge[,49] <- ge[,49]/log2(exp(1)) ##imitate error
library(rafalib)
mypar(1,1)
boxplot(ge,range=0,names=1:ncol(e),col=ifelse(1:ncol(ge)==49,1,2))
mypar(1,1)
shist(ge,unit=0.5)
x <- ge[,1]
y <- ge[,2]
mypar(1,2)
plot(x,y)
plot((x+y)/2,x-y)
sd(y-x)
library(rafalib)
library(tissuesGeneExpression)
install.packages("tissuesGeneExpression")
library(BiocInstaller)
biocLite("genomicsclass/tissuesGeneExpression")
library(tissuesGeneExpression)
install.packages("BiocInstller")
install.packages("BiocInstaller")
library(BiocInstaller)
install.packages("BiocInstaller")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
install.packages("BiocManager")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocInstaller")
library("BiocManager")
library(tissuesGeneExpression)
install.packages("tissueGeneExpression")
biocLite("genomicsclass/tissuesGeneExpression")
install_github("genomicsclass/tissuesGeneExpression")
library(rafalib)
library(tissuesGeneExpression)
data(tissuesGeneExpression)
colind <- tissue%in%c("kidney","colon","liver")
mat <- e[,colind]
group <- factor(tissue[colind])
dim(mat)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("rnaseqGene")
aa
s
library("airway")
data("airwaay")
data("airway")
se <- airway
indir <- system.file("extdata", package="airway", mustWork=TRUE)
indir
list.files(indir)
csvfile <- file.path(indir, "sample_table.csv")
sampleTable <- read.csv(csvfile, row.names = 1)
sampleTable
indir <- system.file("extdata", package="airway", mustWork=TRUE)
indir
filenames <- file.path(indir, paste0(sampleTable$Run, "_subset.bam"))
file.exists(filenames)
$RUN
$Run
library("Rsamtools")
bamfiles <- BamFileList(filenames, yieldSize=2000000)
bamfiles
seqinfo(bamfiles[1])
library("GenomicFeatures")
gtffile <- file.path(indir,"Homo_sapiens.GRCh37.75_subset.gtf")
txdb <- makeTxDbFromGFF(gtffile, format = "gtf", circ_seqs = character())
txdb
ebg <- exonsBy(txdb, by="gene")
ebg
library("GenomicAlignments")
library("BiocParallel")
register(SerialParam())
se <- summarizeOverlaps(features=ebg, reads=bamfiles,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE )
se
dim(se)
assayNames(se)
head(assay(se), 3)
colSums(assay(se))
rowRanges(se)
str(metadata(rowRanges(se)))
colData(se)
colData(se) <- DataFrame(sampleTable)
colData(se)
se$cell
se$dex
library("magrittr")
se$dex %<>% relevel("untrt")
se$dex
se$dex <- relevel(se$dex, "untrt")
se$dex
library("DESeq2")
dds <- DESeqDataSet(se, design = ~ cell + dex)
dds
data("airway")
se <- airway
se$dex %<>% relevel("untrt")
se$dex
round( colSums(assay(se)) / 1e6, 1 )
colData(se)
dds <- DESeqDataSet(se, design = ~ cell + dex)
dds
countdata <- assay(se)
head(countdata, 3)
coldata <- colData(se)
ddsMat <- DESeqDataSetFromMatrix(countData = countdata,
colData = coldata,
design = ~ cell + dex)
ddsMat
nrow(dds)
dds <- dds[ rowSums(counts(dds)) > 1, ]
nrow(dds)
lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
library("vsn")
meanSdPlot(cts, ranks = FALSE)
install.packages("hexbin")
lambda <- 10^seq(from = -1, to = 2, length = 1000)
cts <- matrix(rpois(1000*100, lambda), ncol = 100)
library("vsn")
meanSdPlot(cts, ranks = FALSE)
log.cts.one <- log2(cts + 1)
meanSdPlot(log.cts.one, ranks = FALSE)
vsd <- vst(dds, blind = FALSE)
head(assay(vsd), 3)
colData(vsd)
rld <- rlog(dds, blind = FALSE)
head(assay(rld), 3)
library("dplyr")
library("ggplot2")
dds <- estimateSizeFactors(dds)
df <- bind_rows(
as_data_frame(log2(counts(dds, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"),
as_data_frame(assay(rld)[, 1:2]) %>% mutate(transformation = "rlog"))
colnames(df)[1:2] <- c("x", "y")
ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
sampleDists <- dist(t(assay(vsd)))
sampleDists
library("pheatmap")
library("RColorBrewer")
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$dex, vsd$cell, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
library("PoiClaClu")
poisd <- PoissonDistance(t(counts(dds)))
samplePoisDistMatrix <- as.matrix( poisd$dd )
rownames(samplePoisDistMatrix) <- paste( dds$dex, dds$cell, sep=" - " )
colnames(samplePoisDistMatrix) <- NULL
pheatmap(samplePoisDistMatrix,
clustering_distance_rows = poisd$dd,
clustering_distance_cols = poisd$dd,
col = colors)
plotPCA(vsd, intgroup = c("dex", "cell"))
pcaData <- plotPCA(vsd, intgroup = c( "dex", "cell"), returnData = TRUE)
pcaData
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(x = PC1, y = PC2, color = dex, shape = cell)) +
geom_point(size =3) +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance")) +
coord_fixed()
mds <- as.data.frame(colData(vsd))  %>%
cbind(cmdscale(sampleDistMatrix))
ggplot(mds, aes(x = `1`, y = `2`, color = dex, shape = cell)) +
geom_point(size = 3) + coord_fixed()
mdsPois <- as.data.frame(colData(dds)) %>%
cbind(cmdscale(samplePoisDistMatrix))
ggplot(mdsPois, aes(x = `1`, y = `2`, color = dex, shape = cell)) +
geom_point(size = 3) + coord_fixed()
dds <- DESeq(dds)
res <- results(dds)
res
res <- results(dds, contrast=c("dex","trt","untrt"))
mcols(res, use.names = TRUE)
summary(res)
res.05 <- results(dds, alpha = 0.05)
table(res.05$padj < 0.05)
resLFC1 <- results(dds, lfcThreshold=1)
table(resLFC1$padj < 0.1)
citation("Deseq")
citation("DESeq")
citation("DESeq2")
results(dds, contrast = c("cell", "N061011", "N61311"))
sum(res$pvalue < 0.05, na.rm=TRUE)
sum(!is.na(res$pvalue))
sum(res$padj < 0.1, na.rm=TRUE)
resSig <- subset(res, padj < 0.1)
head(resSig[ order(resSig$log2FoldChange), ])
head(resSig[ order(resSig$log2FoldChange, decreasing = TRUE), ])
topGene <- rownames(res)[which.min(res$padj)]
plotCounts(dds, gene = topGene, intgroup=c("dex"))
library("ggbeeswarm")
geneCounts <- plotCounts(dds, gene = topGene, intgroup = c("dex","cell"),
returnData = TRUE)
ggplot(geneCounts, aes(x = dex, y = count, color = cell)) +
scale_y_log10() +  geom_beeswarm(cex = 3)
ggplot(geneCounts, aes(x = dex, y = count, color = cell, group = cell)) +
scale_y_log10() + geom_point(size = 3) + geom_line()
library("genefilter")
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 20)
mat  <- assay(vsd)[ topVarGenes, ]
mat  <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[, c("cell","dex")])
pheatmap(mat, annotation_col = anno)
ddssva <- ddssva
ddssva <- dds
ddssva$SV1 <- svseq$sv[,1]
library("sva")
dat  <- counts(dds, normalized = TRUE)
idx  <- rowMeans(dat) > 1
dat  <- dat[idx, ]
mod  <- model.matrix(~ dex, colData(dds))
mod0 <- model.matrix(~   1, colData(dds))
svseq <- svaseq(dat, mod, mod0, n.sv = 2)
svseq$sv
ddssva <- dds
ddssva$SV1 <- svseq$sv[,1]
ddssva$SV2 <- svseq$sv[,2]
design(ddssva) <- ~ SV1 + SV2 + dex
q()
library(mvabund)
install.packages("mvabund")
library(lattice)
envi <- read.csv("envi_watermelon.csv", row.names = 1)
library(ade4)
install.packages("ade4")
traits <- read.csv('traits.csv')
data(aravo)
data(aravo)
library(xlsx)
install.packages("xlsx"
)
library (ade4)
data (aravo)
data(aravo)
dim(aravo$spe)
afcL.aravo <- dudi.coa(aravo$spe, scannf = FALSE)
acpR.aravo <- dudi.hillsmith(aravo$env, row.w = afcL.aravo$lw,
scannf = FALSE)
acpQ.aravo <- dudi.pca(aravo$traits, row.w = afcL.aravo$cw,
scannf = FALSE)
rlq.aravo <- rlq(acpR.aravo, afcL.aravo, acpQ.aravo,
scannf = FALSE)
plot(rlq.aravo)
summary(rlq.aravo)
quit()
library(ade4)
library(adeegraphics)
library(adegraphics)
install.packages('adegraphics')
install.packages('adegraphics')
install.packages('adegraphics')
library('adegraphics')
data(meaudret)
env<-meaudret$env
env
pca1<-dudi.pca(env,scannf=FLASE, nf=3)
pca1<-dudi.pca(env,scannf=FALSE, nf=3)
pca
pca1
class(pca1)
names(pca1)
pca1.tab
pca1#tab
pca1$tab
sqrt(nrow(env)/(nrow(env)-1))
sqrt(nrow(env)/(nrow(env)-1)
)
data("dunedata")
dunedata$envir
quit()
install.packages("devtools")
require(devtools)
install_github("ericgoolsby/Rphylopars",dependencies = TRUE)
install_github("ericgoolsby/Rphylopars",dependencies = TRUE)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_github("ericgoolsby/Rphylopars",dependencies = TRUE)
sudo rm -rf /usr/local/clang4
install_github("ericgoolsby/Rphylopars",dependencies = TRUE)
library(phytools)library(phytools)
library(phytools)
library(Rphylopars)
usethis::edit_r_environ()
library(dirmult)]
library(dirmult)
N=20
T=10
P=30
beta0=abs(rnorm(P,10,20))
causal.indd=sample(1:20,3)
causal.ind=sample(1:20,3)
group1=array(NA,dim=c(N,P,T))
for (t in 1:T) group1[, ,t] = rdirchlet(N,(beta0))
for (t in 1:T) group1[, ,t] = rdirichlet(N,(beta0))
group2 = array(NA, dim=c(N,P,T))
for (t in 1:T) {}
for (t in 1:T) {
betaT=rep(0,P)
effect.size1 = c(-1,2,-1)/2*min(beta0[causal.ind])*sin(t)
betaT[causal.ind] = effect.size1
group2[,,t] = rdirichlet(N,(beta0+betaT))}
MTA(Y1=group1)
install.packages("MTA")
MTA(Y1=group1)
load('MTA')
library('MTA')
MTA(Y1=group1)
MTA::cardist
MTA(Y1=group1)
load("~/Documents/bmt_fungal.RData")
get.fungal.palette <- function(tax) {
if (class(tax)[1] %in% c("phyloseq", "taxonomyTable")) {
tax <- get.tax(tax.obj)
}
ranks <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
if (!all(ranks %in% names(tax))) {
stop("YTError: need to have taxon levels: Kingdom, Phylum, Class, Order, Family, Genus, Species")
}
tax.dict <- tax[, ranks] %>% distinct()
tax.dict$color <- rep(shades("gray", variation=0.25),length.out = nrow(tax.dict))
basidio <- tax.dict$Phylum == "Basidiomycota"
tax.dict$color[basidio] <- rep(shades("#C48C66", variation = 0.4), length.out = sum(basidio))
malassezia <- tax.dict$Genus == "Malassezia"
tax.dict$color[malassezia] <- rep(shades("#8A3030", variation = 0.6), length.out = sum(malassezia))
molds <- c("Arthoniomycetes","Coniocybomycetes","Dothideomycetes",
"Eurotiomycetes","Geoglossomycetes","Laboulbeniomycetes",
"Lecanoromycetes","Leotiomycetes","Lichinomycetes","Orbiliomycetes",
"Pezizomycetes","Sordariomycetes","Xylonomycetes")
mold_group <- tax.dict$Class %in% molds
tax.dict$color[mold_group] <- rep(shades("#ADDADA",variation=0.4),length.out=sum(mold_group))
aspergillus <- tax.dict$Genus == "Aspergillus"
tax.dict$color[aspergillus] <- rep(shades("#3F8D3D", variation = 0.4), length.out = sum(aspergillus))
saccharo <- tax.dict$Order == "Saccharomycetales"
tax.dict$color[saccharo] <- rep(shades("#F0C3C3", variation = 0.4), length.out = sum(saccharo))
candida <- tax.dict$Genus == "Candida" & tax.dict$Family == "Debaryomycetaceae"
tax.dict$color[candida] <- rep(shades("#DE0000", ncolor=6,variation = 0.6), length.out = sum(candida))
sc <- tax.dict$Species == "Saccharomyces cerevisiae"
tax.dict$color[sc] <- rep("#DA8686")
tax.palette <- structure(tax.dict$color, names = as.character(tax.dict$Species))
tax.palette
}
bpal <- get.yt.palette2(get.tax(phy.bmt.bact))
fpal <- get.fungal.palette(get.tax(phy.bmt.fungal))
install.packages("yingtools2")
devtools::install_github("ying14/yingtools2")
library(yingtools2)
get.fungal.palette <- function(tax) {
if (class(tax)[1] %in% c("phyloseq", "taxonomyTable")) {
tax <- get.tax(tax.obj)
}
ranks <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
if (!all(ranks %in% names(tax))) {
stop("YTError: need to have taxon levels: Kingdom, Phylum, Class, Order, Family, Genus, Species")
}
tax.dict <- tax[, ranks] %>% distinct()
tax.dict$color <- rep(shades("gray", variation=0.25),length.out = nrow(tax.dict))
basidio <- tax.dict$Phylum == "Basidiomycota"
tax.dict$color[basidio] <- rep(shades("#C48C66", variation = 0.4), length.out = sum(basidio))
malassezia <- tax.dict$Genus == "Malassezia"
tax.dict$color[malassezia] <- rep(shades("#8A3030", variation = 0.6), length.out = sum(malassezia))
molds <- c("Arthoniomycetes","Coniocybomycetes","Dothideomycetes",
"Eurotiomycetes","Geoglossomycetes","Laboulbeniomycetes",
"Lecanoromycetes","Leotiomycetes","Lichinomycetes","Orbiliomycetes",
"Pezizomycetes","Sordariomycetes","Xylonomycetes")
mold_group <- tax.dict$Class %in% molds
tax.dict$color[mold_group] <- rep(shades("#ADDADA",variation=0.4),length.out=sum(mold_group))
aspergillus <- tax.dict$Genus == "Aspergillus"
tax.dict$color[aspergillus] <- rep(shades("#3F8D3D", variation = 0.4), length.out = sum(aspergillus))
saccharo <- tax.dict$Order == "Saccharomycetales"
tax.dict$color[saccharo] <- rep(shades("#F0C3C3", variation = 0.4), length.out = sum(saccharo))
candida <- tax.dict$Genus == "Candida" & tax.dict$Family == "Debaryomycetaceae"
tax.dict$color[candida] <- rep(shades("#DE0000", ncolor=6,variation = 0.6), length.out = sum(candida))
sc <- tax.dict$Species == "Saccharomyces cerevisiae"
tax.dict$color[sc] <- rep("#DA8686")
tax.palette <- structure(tax.dict$color, names = as.character(tax.dict$Species))
tax.palette
}
bpal <- get.yt.palette2(get.tax(phy.bmt.bact))
fpal <- get.fungal.palette(get.tax(phy.bmt.fungal))
get.tax()
library(yingtools2)
install.packages("~/Downloads/vctrs_0.3.4.tgz", repos = NULL, type="source")
library(yingtools2)
library(yingtools2)
update.packages(ask=FALSE,
checkBuilt=TRUE,
repos="https://cloud.r-project.org")
library(yingtools2)
install.packages("vctrs")
library(yingtools2)
install.packages("~/Downloads/vctrs_0.3.4.tgz", repos = NULL, type="source")
library(yingtools2)
install.packages("vctrs")
library(yingtools2)
devtools::install_github("ying14/yingtools2")
devtools::install_github("ying14/yingtools2", force=TRUE)
library(yingtools2)
devtools::install_github("biobakery/melonnpan")
setwd("~/Documents/Source_codes_for_oral_microbiome_project/data/Sinha2020CHM/data")
plotQualityProfile('SRR10850385_1.fastq.gz')
library(dada2)
plotQualityProfile('SRR10850385_1.fastq.gz')
plotQualityProfile('SRR10850386_1.fastq.gz')
plotQualityProfile('SRR10850386_1=2.fastq.gz')
plotQualityProfile('SRR10850386_2.fastq.gz')
plotQualityProfile('SRR10850385_2.fastq.gz')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Install HMP2Data package using BiocManager
BiocManager::install("HMP2Data")
data("momspi16S_mtx")
momspi16S_mtx[1:5, 1:3]
library(HMP2Data)
library(phyloseq)
library(SummarizedExperiment)
library(MultiAssayExperiment)
library(dplyr)
library(ggplot2)
library(UpSetR)
library(HMP2Data)
BiocManager::install("jstansfield0/HMP2Data")
install.packages("omicade4")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("omicade4")
library(omicade4)
data("NCI60_4arrays")
View(meaudret)
View(NCI60_4arrays)
agilent
NCI60_4arrays$agilent
head(NCI60_4arrays$agilent)
head(NCI60_4arrays$hgu133)
setwd("~/Projects/OralPerc/examples/Li_IJOS_2019/output")
library(FEAST)
metadata <- Load_metadata(metadata_path = "/Users/liaoc/Projects/OralPerc/examples/Li_IJOS_2019/output/metadata_SRR5989520.txt")
metadata <- Load_metadata(metadata_path = "metadata_SRR5989520.txt")
install.packages("FEAST")
install.packages("FEAST")
Packages <- c("Rcpp", "RcppArmadillo", "vegan", "dplyr", "reshape2", "gridExtra", "ggplot2", "ggthemes")
install.packages(Packages)
devtools::install_github("cozygene/FEAST")
metadata <- Load_metadata(metadata_path = "metadata_SRR5989520.txt")
library(FEAST)
metadata <- Load_metadata(metadata_path = "metadata_SRR5989520.txt")
